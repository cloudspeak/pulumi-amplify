from pathlib import Path
from typing import Any, Dict, Optional

from pulumi import ResourceOptions
from pulumi.dynamic import Resource
from pulumi.dynamic.dynamic import CreateResult, DiffResult, ResourceProvider

EXPORTS_FILE_NAME = "aws-exports.js"


class AmplifyExportsFile(Resource):
    """
    Manages an Amplify-style JavaScript exports file, containing parameters for use
    by client code.  By default this file will be called aws-exports.js.
    """

    def __init__(
        self,
        name: str,
        source_directory: str,
        parameters: Dict,
        opts: Optional[ResourceOptions] = None,
    ):
        """
        :param str source_directory:    The path of the client source directory in
                                        which the exports file should be placed
        :param Dict parameters:         The parameters which will appear in the
                                        JavaScript object
        """

        super().__init__(
            AmplifyExportsFileProvider(),
            name,
            {
                "exports_file_path": str(
                    Path(source_directory).joinpath(EXPORTS_FILE_NAME)
                ),
                "parameters": parameters,
            },
            opts,
        )


class AmplifyExportsFileProvider(ResourceProvider):
    """
    The dynamic provider for the AmplifyExportsFile resource, which creates and
    deletes the file.
    """

    def create(self, inputs: Dict[str, Any]) -> CreateResult:
        file_inputs = inputs["parameters"]

        file_content = [
            "/* eslint-disable */",
            (
                "// WARNING: DO NOT EDIT. This file is automatically generated by "
                "pulumi-amplify. It will be overwritten."
            ),
            "",
            "const awsmobile = {",
            *[f'    "{key}": "{file_inputs[key]}",' for key in file_inputs.keys()],
            "};",
            "",
            "",
            "export default awsmobile;",
        ]
        exports_file_path = Path(inputs["exports_file_path"])
        exports_file_path.write_text("\n".join(file_content))
        return CreateResult(exports_file_path.name, {})

    def diff(self, _id, olds, _news):
        return DiffResult(
            changes=True, replaces=olds.keys(), delete_before_replace=True
        )

    def delete(self, _id, props):
        Path(props.exports_file_path).unlink()
